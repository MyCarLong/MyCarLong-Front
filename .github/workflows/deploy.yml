name: Deploy

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies for both React and Express
        run: |
          cd React && npm install
          cd ../Express && npm install

      - name: Adjust Swappiness
        run: |
          sudo sysctl vm.swappiness=80

      - name: Build the React application
        env:
          NODE_OPTIONS: --max_old_space_size=4096  # 메모리 할당 한도를 4GB로 설정
          GENERATE_SOURCEMAP: false  # 소스 맵 생성을 비활성화
        run: |
          cd React
          echo "Memory usage before build:"
          free -m
          npm run build  # npm run build 명령어 실행
          echo "Memory usage after build:"
          free -m

      - name: Set environment variables from GitHub Secrets
        run: |
          echo "REACT_APP_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> React/.env
          echo "REACT_APP_BASE_URL=${{ secrets.BASE_URL }}" >> React/.env
          echo "REACT_APP_GPT_API_KEY=${{ secrets.GPT_API_KEY }}" >> React/.env
          echo "REACT_APP_NAME_SECRET_KEY=${{ secrets.NAME_SECRET_KEY }}" >> React/.env
          echo "REACT_APP_GOOGLE_APPLICATION_CREDENTIALS='${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'" >> React/.env

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Deploy to EC2
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}
          NAME_SECRET_KEY: ${{ secrets.NAME_SECRET_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ -d "/home/ubuntu/MyCarLong-Front/.git" ]; then
              cd /home/ubuntu/MyCarLong-Front
              git checkout release
              git pull origin release
            else
              git clone --branch release https://github.com/MyCarLong/MyCarLong-Front.git /home/ubuntu/MyCarLong-Front
              cd /home/ubuntu/MyCarLong-Front
            fi
            docker-compose down
            docker-compose up --build -d
            echo "Deployment complete."
          EOF

      - name: Cleanup
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Cleaning up unused Docker resources and snaps..."
            docker system prune -a -f --volumes
            sudo bash -c '
              snap list --all | awk '/disabled/{print \$1, \$3}' | while read snapname revision; do
                echo "Removing \$snapname revision \$revision"
                snap remove "\$snapname" --revision="\$revision"
              done
            '
            echo "Cleanup complete."
          EOF

      - name: Cleanup on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Cleaning up due to build failure..."
            docker system prune -a -f --volumes
            sudo rm -rf /home/ubuntu/.cache/*
            sudo bash -c '
              snap list --all | awk '/disabled/{print \$1, \$3}' | while read snapname revision; do
                echo "Removing \$snapname revision \$revision"
                snap remove "\$snapname" --revision="\$revision"
              done
            '
            echo "Cleanup complete."
          EOF
