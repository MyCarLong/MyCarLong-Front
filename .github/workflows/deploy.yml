name: Deploy

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies for both React and Express
        run: |
          cd React && npm install
          cd ../Express && npm install

      - name: Build the React application
        env:
          NODE_OPTIONS: --max_old_space_size=4096
          GENERATE_SOURCEMAP: false
        run: |
          cd React
          echo "Memory usage before build:"
          free -m
          CI=false npm run build
          echo "Memory usage after build:"
          free -m

      - name: Set environment variables from GitHub Secrets
        run: |
          echo "REACT_APP_GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
          echo "REACT_APP_BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "REACT_APP_GPT_API_KEY=${{ secrets.GPT_API_KEY }}" >> .env
          echo "REACT_APP_NAME_SECRET_KEY=${{ secrets.NAME_SECRET_KEY }}" >> .env
          echo "REACT_APP_GOOGLE_APPLICATION_CREDENTIALS='${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'" >> .env

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Deploy to EC2
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}
          NAME_SECRET_KEY: ${{ secrets.NAME_SECRET_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ -d "/home/ubuntu/MyCarLong-Front/.git" ]; then
              cd /home/ubuntu/MyCarLong-Front
              git checkout release
              git pull origin release
            else
              git clone --branch release https://github.com/MyCarLong/MyCarLong-Front.git /home/ubuntu/MyCarLong-Front
              cd /home/ubuntu/MyCarLong-Front
            fi
            docker-compose down
            docker-compose up --build -d || { echo "Build failed, cleaning up..."; ./cleanup.sh; exit 1; }
          EOF

      - name: Cleanup
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Cleaning up..."
            docker system prune -f
            docker volume prune -f
            docker network prune -f
            rm -rf /home/ubuntu/MyCarLong-Front/React/build
            rm -rf /home/ubuntu/MyCarLong-Front/React/node_modules
            echo "Cleanup complete."
          EOF
